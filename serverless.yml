# NOTE: update this with your service name
service: notes-app-api

# Create an optimized package for our functions 
package:
  individually: true

plugins:
  - serverless-bundle # Package our functions with Webpack
  - serverless-offline
  - serverless-dotenv-plugin # Load .env as environment variables

provider:
  name: aws
  runtime: nodejs12.x
  stage: prod
  region: us-east-1
  environment:
    tableUsersName: users
    tableMemesName: memes
    tableChatsName: chats
    tableReportMemesName: reportmemes
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:us-east-1:*:*"

resources:
  # API Gateway Errors
  - ${file(resources/api-gateway-errors.yml)}

functions:
  createUser:
    handler: api/users/create.main
    events:
      - http:
          path: users
          method: post
          cors: true
          authorizer: aws_iam
  getUser:
    handler: api/users/get.main
    events:
      - http:
          path: users/{id}
          method: get
          cors: true
          authorizer: aws_iam
  listUser:
    # Defines an HTTP API endpoint that calls the main function in list.js
    # - path: url path is /notes
    # - method: GET request
    handler: api/users/list.main
    events:
      - http:
          path: users
          method: get
          cors: true
          authorizer: aws_iam
  matchUser:
    handler: api/users/match.main
    events:
      - http:
          path: matchusers/{id}
          method: get
          cors: true
          authorizer: aws_iam
  updateUser:
    # Defines an HTTP API endpoint that calls the main function in update.js
    # - path: url path is /notes/{id}
    # - method: PUT request
    handler: api/users/update.main
    events:
      - http:
          path: users/{id}
          method: put
          cors: true
          authorizer: aws_iam
  deleteUser:
      # Defines an HTTP API endpoint that calls the main function in delete.js
      # - path: url path is /notes/{id}
      # - method: DELETE request
      handler: api/users/delete.main
      events:
        - http:
            path: users/{id}
            method: delete
            cors: true
            authorizer: aws_iam
  reportMeme:
      # Defines an HTTP API endpoint that calls the main function in delete.js
      # - path: url path is /notes/{id}
      # - method: DELETE request
      handler: api/reportMeme/create.main
      events:
        - http:
            path: reportmemes
            method: post
            cors: true
            authorizer: aws_iam
  createMeme:
      # Defines an HTTP API endpoint that calls the main function in delete.js
      # - path: url path is /notes/{id}
      # - method: DELETE request
      handler: api/memes/create.main
      events:
        - http:
            path: memes
            method: post
            cors: true
            authorizer: aws_iam
  updateMeme:
    handler: api/memes/update.main
    events:
      - http:
          path: memes/{id}
          method: put
          cors: true
          authorizer: aws_iam
  deleteMeme:
    handler: api/memes/delete.main
    events:
      - http:
          path: memes/{id}
          method: delete
          cors: true
          authorizer: aws_iam
  websocket-connect:
    handler: api/websocket/connect.main
    events:
      - websocket:
          route : $connect
  websocket-disconnect:
    handler: api/websocket/disconnect.main
    events:
      - websocket:
          route : $disconnect
  websocket-default:
    handler: api/websocket/default.main
    events:
      - websocket:
          route : $default
  websocket-message:
    handler: api/websocket/message.main
    events:
      - websocket:
          route : message